name: Auto Merge PRs

on:
  pull_request_target:
    types:
      - labeled
      - synchronize

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check for merge-ready label
        id: check_label
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            const hasLabel = labels.data.some(label => label.name === 'merge-ready');
            console.log(`PR has merge-ready label: ${hasLabel}`);
            return hasLabel.toString();

      - name: Checkout code
        if: steps.check_label.outputs.result == 'true'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Merge PR with GitHub API
        if: steps.check_label.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            console.log(`Attempting to merge PR #${pr.number}`);
            
            // Get PR details
            const { data: prData } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            if (!prData.mergeable) {
              console.log('PR is not in a mergeable state. Please resolve conflicts or wait for checks to complete.');
              process.exit(1);
            }
            
            try {
              // Create commit message with PR title and description
              const commitTitle = prData.title;
              const commitMessage = prData.body || '';
            
              const mergeResult = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                commit_title: commitTitle,
                commit_message: commitMessage,
                merge_method: 'squash'
              });
              console.log(`PR successfully merged with title: ${prData.title}`);
              console.log(`Merge SHA: ${mergeResult.data.sha}`);
            } catch (error) {
              console.log(`Error merging PR: ${error.message}`);
              process.exit(1);
            }
